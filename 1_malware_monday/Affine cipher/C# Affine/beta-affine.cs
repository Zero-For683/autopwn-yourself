using System;


// This was the fully-built beta affine cipher. Real-world it doesnt actually work, but I wanted to build the encryption and decryption with chatgpt for practice

// The real-usable version uses the python script I built to encrypt the shellcode and give the key for it to decrypt. 

// This program is simply a PoC


class AffineCipher
{
    static void Main()
    {
        byte[] buf = new byte[] { 0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x41 }; // fake shellcode

        int a = 7; // The number we multiply. This number must be coprime with 256 (0-255 possible bytes)
        int b = 23; // This is the numer we add. Doesn't matter what number we put, as long as it's not negative, and its a whole number

        if (GCD(a, 256) != 1) // Making sure the number we generated randomly is coprime with 256
        {
            Console.WriteLine("'a' is not a coprime with 256, try another number");
            return;
        }
        int a_inv = ModInverse(a, 256); // Getting the inverse modulo of the multiplicative number for decryption

        byte[] encrypted = Encrypt(buf, a, b); // Encrypting the shellcode
        byte[] decrypted = Decrypt(encrypted, a_inv, b); // Decrypting the shellcode

        Console.WriteLine("Original:  " + BitConverter.ToString(buf)); // Debugging lines
        Console.WriteLine("Encrypted: " + BitConverter.ToString(encrypted));
        Console.WriteLine("Decrypted: " + BitConverter.ToString(decrypted));

    }

    static byte[] Encrypt(byte[] input, int a, int b) // Encrypts the shellcode
    {
        byte[] result = new byte[input.Length];
        for (int i = 0; i < input.Length; i++)
        {
            result[i] = (byte)((a * input[i] + b) % 256);

        }
        return result;
    }

    static byte[] Decrypt(byte[] input, int a_inv, int b) // Decrypts the shellcode
    {
        byte[] result = new byte[input.Length];
        for (int i = 0; i < input.Length; i++)
        {
            int temp = a_inv * (input[i] - b);
            result[i] = (byte)((temp + 256 * 3) % 256);
        }
        return result;
    }
    static int GCD(int a, int b) // This tests to see if the number we use as a multiplier is coprime with 256
    {
        while (b != 0)
        {
            int t = b;
            b = a % b;
            a = t;
        }
        return a;
    }

    static int ModInverse(int a, int m) // Fancy math function to get the modular inverse of our coprime number. There is no fancy math function like in python. Thanks ChatGPT
    {
        int m0 = m, t, q;
        int x0 = 0, x1 = 1;

        if (m == 1)
            return 0;

        while (a > 1)
        {
            q = a / m;
            t = m;
            m = a % m;
            a = t;

            t = x0;
            x0 = x1 - q * x0;
            x1 = t;
        }

        if (x1 < 0)
            x1 += m0;

        return x1;
    }
} 

